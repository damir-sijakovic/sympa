<link rel="stylesheet" href="{{rootUrl}}/assets/vendor/trumbowyg/trumbowyg.min.css">
<link rel="stylesheet" href="{{rootUrl}}/assets/vendor/trumbowyg/plugins/table/trumbowyg.table.min.css">
<style>
	#trumbowyg-element{
		background: #ffffff;
	}

	.sympa-categories-between{
		display:flex; 
		justify-content:space-between;
		align-items: baseline;
	}
	
	h6{
		font-size: 13px;
	}
	
	.sympa-selected-table-item{
		background: #0d6efd !important;
		color: white !important;
	}
	
	.sympa-error{
		border: 1px red solid !important;
	}
	
	.trumbowyg-textarea{
		font-size: 16px;
		font-family: 'Consolas', 'Courier New', Courier, monospace;
		line-height: 22px;
	}
    
    .sympa-pill-button{
        box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;
    }
	
</style>


<h2>Edit article</h2>

<hr>


    <div class="col-8">
    
		<h6>ID:</h6>
	    <input class="form-control" id="sympa-article-id-input" placeholder="" readonly >        
        
        <br>
        <h6>Title:</h6>
		<input class="form-control" id="sympa-article-title-input" value="" >    
    
		<br>
		<h6>Excerpt:</h6>
		<textarea class="form-control" id="sympa-post-excerpt-textarea" rows="3" maxlength="255" placeholder="" value="{{excerpt|raw}}"></textarea>
		<br />
		<h6>Content:</h6>
		<div id="trumbowyg-element"></div>			
            
		<br />       
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" id="sympa-article-active" checked>
            <label class="form-check-label" for="flexSwitchCheckChecked">Visible</label>
        </div>
            
        <br />
		<h6>Categories:</h6>
		<div style="display:flex">		
			<button style="margin-right:6px" onclick="sympa_openCategoryModal()" type="button" class="btn btn-sm btn-light"> Add <span class="badge bg-primary">+</span></button>
			<div id="sympa-selected-categories-list"></div>	
		</div>
		
		<br />
		<h6>Tags:</h6>
		<div style="display:flex">		
			<button style="margin-right:6px" onclick="sympa_openTagModal()" type="button" class="btn btn-sm btn-light"> Add <span class="badge bg-primary">+</span></button>
			<div id="sympa-selected-tags-list"></div>	
		</div>  
        
        
        <br />
        <div onclick="sympa_save()" class="btn btn-primary btn-lg" >Save</div>   
        <a href="/article/{{id}}" class="btn btn-outline-primary btn-lg" target="_blank">Preview</a>   
       
    </div>












<div class="modal sympa-modal" id="sympa-tag-modal" style="display:none;">
  <div class="modal-dialog" >
    <div class="modal-content" >
      <div class="modal-header">
        <h5 class="modal-title">Select tag</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="document.getElementById('sympa-tag-modal').style.display='none'"></button>
      </div>
      <div class="modal-body" style="height: calc(100vh - 200px) !important; overflow:scroll;">
        
        <div id="sympa-tag-loading-modal" class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
       </div>
      
        <ul id="sympa-tag-ul-modal" class="list-group" style="display:none;">
          <li class="sympa-category-select-list list-group-item">Empty list</li>
        </ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="document.getElementById('sympa-tag-modal').style.display='none'">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="sympa_selectTagItemAction()">Select</button>
      </div>

	<div class="alert alert-warning alert-dismissible fade show" role="alert" style="display:none; margin-bottom: 0;">
	   <span id="sympa-bulk-delete-modal-message"> Hello</span> 
	  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" ></button>
	</div>

    </div>
  </div>
</div>


<div class="modal sympa-modal" id="sympa-category-modal" style="display:none;">
  <div class="modal-dialog" >
    <div class="modal-content" >
      <div class="modal-header">
        <h5 class="modal-title">Select category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="document.getElementById('sympa-category-modal').style.display='none'"></button>
      </div>
      <div class="modal-body" style="height: calc(100vh - 200px) !important; overflow:scroll;">
        
        <div id="sympa-category-loading-modal" class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
       </div>
      
        <ul id="sympa-category-ul-modal" class="list-group" style="display:none;">
          <li class="sympa-category-select-list list-group-item">Empty list</li>
        </ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="document.getElementById('sympa-category-modal').style.display='none'">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="sympa_selectCategoryItemAction()">Select</button>
      </div>

	<div class="alert alert-warning alert-dismissible fade show" role="alert" style="display:none; margin-bottom: 0;">
	   <span id="sympa-bulk-delete-modal-message"> Hello</span> 
	  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" ></button>
	</div>

    </div>
  </div>
</div>













<script src="{{rootUrl}}/assets/vendor/jquery-3.6.0/jquery-3.6.0.min.js"></script>
<script src="{{rootUrl}}/assets/vendor/trumbowyg/trumbowyg.min.js"></script>
<script src="{{rootUrl}}/assets/vendor/trumbowyg/plugins/table/trumbowyg.table.min.js"></script>
<script src="{{rootUrl}}/assets/vendor/slugify/slugify.min.js"></script> 
<script src="{{rootUrl}}/assets/vendor/slugify/speakingurl.min.js"></script> 

<script>

//EDITOR
var trumboEditor = $('#trumbowyg-element').trumbowyg({
    autogrow: true,
    tagsToRemove: ['script', 'iframe', 'style'],    
    
    plugins: {
        table: {
            // Allows creating tables up to 10 x 10
            limitRows: 10,
            limitCols: 10,

            // Allows creating tables with a maximum of 100 cells
            limitCells: 100,

            // Allows creating tables with a maximum width of 1000 pixels
            limitWidth: 1000,

            // Allows creating tables with a maximum height of 500 pixels
            limitHeight: 500
        }
    },
    
    /*
    btns: [
        ['viewHTML'],
        ['formatting'],
        ['strong', 'em', 'del'],
        ['superscript', 'subscript'],
        ['link'],
        ['image'],
        ['table'],
        ['tableAddRowAbove', 'tableAddRowBelow', 'tableRemoveRow'],
        ['tableAddColLeft', 'tableAddColRight', 'tableRemoveCol'],
        ['tableMergeCells', 'tableSplitCells'],
        ['horizontalRule'],
        ['fullscreen']
    ],
    */
});


/////////


// TAGS
async function sympa_openTagModal(){    
    const _createItem = function(item){
        const name = item.name;
        const id = item.id;
        const slug = item.slug;
        //console.log(item);
        return `<li onclick="sympa_toggleSelectedTag(this)" 
            class="sympa-tag-select-list list-group-item" 
            title="ID: ${id}\nSlug: ${slug}"
            data-id="${id}" data-name="${name}" data-slug="${slug}"
            >${name}</li>`;
    }
    
    document.getElementById("sympa-tag-modal").style.display = "block";   
    
    const response = await fetch('/tag-get-all?per-page=1000&page=1');
    const jsonData = await response.json();
	
	if (jsonData.error) {
		sympa_message(jsonData.message, 'warning');
	}
    
    if (jsonData.total > 0){        
        document.getElementById("sympa-tag-loading-modal").classList.add("d-none");
        document.getElementById("sympa-tag-ul-modal").style.display = "block";
        let htmlData = "";
        for (const key in jsonData.tags) {
            htmlData += _createItem(jsonData.tags[key]);
        }
        document.getElementById("sympa-tag-ul-modal").innerHTML = htmlData;
    }   
      
}

function sympa_toggleSelectedTag(that){
    document.querySelectorAll('.sympa-tag-select-list').forEach(element => element.classList.remove('active'));
    that.classList.toggle("active");
   // console.log(that);
    const id = that.getAttribute("data-id");
    const name = that.getAttribute("data-name");
    
    localStorage.setItem("sympa-create-article-tag-item-name", name);
    localStorage.setItem("sympa-create-article-tag-item-id", id);
}


function sympa_selectTagItemAction(){    
    const createItem = function(id, slug, name){
        return `<button data-id="${id}" data-slug="${slug}" data-name="${name}" type="button" class="btn btn-sm btn-light sympa-pill-button mx-1"> ${name} <span class="badge bg-danger" onclick="this.parentElement.remove()">Ã—</span></button>	`;
    }

    document.getElementById("sympa-tag-modal").style.display = "none";  
    let id = localStorage.getItem("sympa-create-article-tag-item-id");
    let name = localStorage.getItem("sympa-create-article-tag-item-name");    
    let slug = localStorage.getItem("sympa-create-article-tag-item-slug");
    
    let target = document.getElementById("sympa-selected-tags-list");
	let divElements = target.querySelectorAll('button[data-id]');

	for (let i = 0; i < divElements.length; i++) {
		let dataId = divElements[i].getAttribute('data-id');		
		if (dataId === id) {
			return; 
		}
    }
    
    target.innerHTML += createItem(id, slug, name);    
}

function sympa_getSelectedTagIds() {
	let parent = document.getElementById('sympa-selected-tags-list');
	let elements = parent.querySelectorAll('[data-id]');
	let tags = [];

	for (let i = 0; i < elements.length; i++) {
		let element = elements[i];
		let id = element.getAttribute("data-id");
		tags.push(parseInt(id));
	}

    //console.log(tags);

	return tags;
}

// CATEGORY
async function sympa_openCategoryModal(){    
    const _createItem = function(item){
        const name = item.name;
        const id = item.id;
        const slug = item.slug;

        return `<li onclick="sympa_toggleSelectedCategory(this)" 
            class="sympa-category-select-list list-group-item" 
            title="ID: ${id}\nSlug: ${slug}"
            data-id="${id}" data-name="${name}" data-slug="${slug}"
            >${name}</li>`;
    }
    
    document.getElementById("sympa-category-modal").style.display = "block";   
    
    const response = await fetch('/category-get-all?per-page=1000&page=1');
    const jsonData = await response.json();
	
	if (jsonData.error) {
		sympa_message(jsonData.message, 'warning');
	}
    
    if (jsonData.total > 0){        
        document.getElementById("sympa-category-loading-modal").classList.add("d-none");
        document.getElementById("sympa-category-ul-modal").style.display = "block";
        let htmlData = "";
        for (const key in jsonData.categories) {
            htmlData += _createItem(jsonData.categories[key]);
        }
        document.getElementById("sympa-category-ul-modal").innerHTML = htmlData;
    }   
      
}

function sympa_toggleSelectedCategory(that){
    document.querySelectorAll('.sympa-category-select-list').forEach(element => element.classList.remove('active'));
    that.classList.toggle("active");
   // console.log(that);
    const id = that.getAttribute("data-id");
    const name = that.getAttribute("data-name");
    
    localStorage.setItem("sympa-create-article-category-item-name", name);
    localStorage.setItem("sympa-create-article-category-item-id", id);
}


function sympa_selectCategoryItemAction(){    
    const createItem = function(id, slug, name){
        return `<button data-id="${id}" data-slug="${slug}" data-name="${name}" type="button" class="btn btn-sm btn-light sympa-pill-button mx-1"> ${name} <span class="badge bg-danger" onclick="this.parentElement.remove()">Ã—</span></button>	`;
    }
        

    document.getElementById("sympa-category-modal").style.display = "none";  
    let id = localStorage.getItem("sympa-create-article-category-item-id");
    let name = localStorage.getItem("sympa-create-article-category-item-name");    
    let slug = localStorage.getItem("sympa-create-article-category-item-slug");
    
    let target = document.getElementById("sympa-selected-categories-list");
	let divElements = target.querySelectorAll('button[data-id]');

	for (let i = 0; i < divElements.length; i++) {
		let dataId = divElements[i].getAttribute('data-id');		
		if (dataId === id) {
			return; 
		}
	}
    
    target.innerHTML += createItem(id, slug, name);    
}

function sympa_getSelectedCategoryIds() {
	let parent = document.getElementById('sympa-selected-categories-list');
	let elements = parent.querySelectorAll('[data-id]');
	let categories = [];

	for (let i = 0; i < elements.length; i++) {
		let element = elements[i];
		let categoryId = element.getAttribute("data-id");
		categories.push(parseInt(categoryId));
	}

   // console.log(categories);

	return categories;
}


async function sympa_initCategoriesAndTags(){
       
    const response = await fetch('/get-article-categories-and-tags/{{id|raw}}'); 
	const jsonData = await response.json();
    
	if (response.status != 200) {
		console.log('ERROR!');
		return null;
	}
    
    if (jsonData.error){
        sympa_message(jsonData.message);
    }
    
    //TAGS
    const tagIds = jsonData.data.tagIds;    
    const _createTag = function(id, slug, name){
        let target = document.getElementById("sympa-selected-tags-list");
        let divElements = target.querySelectorAll('button[data-id]');

        for (let i = 0; i < divElements.length; i++) {
            let dataId = divElements[i].getAttribute('data-id');		
            if (dataId === id) {
                return; 
            }
        } 
        
        target.innerHTML += `<button data-id="${id}" data-slug="${slug}" data-name="${name}" type="button" class="btn btn-sm btn-light sympa-pill-button mx-1"> ${name} <span class="badge bg-danger" onclick="this.parentElement.remove()">Ã—</span></button>`; 
    }   
        
    let tagPostData = new FormData();  
    tagPostData.append('ids', tagIds);

    const tagResponse = await fetch('/tag-get-by-ids', {
        method: 'POST', 
        body: tagPostData,
    });

    const tagJsonData = await tagResponse.json();
    if (tagResponse.status != 200) {		
        sympa_message("tag(s) ERROR!", "warning");
    }

    tagJsonData.tags.forEach(x => {          
        _createTag(x.id,x.name,x.slug);
    });
    
    
    //CATEGORY
    const categoryIds = jsonData.data.categoryIds;
    const _createCategory = function(id, slug, name){
        let target = document.getElementById("sympa-selected-categories-list");
        let divElements = target.querySelectorAll('button[data-id]');

        for (let i = 0; i < divElements.length; i++) {
            let dataId = divElements[i].getAttribute('data-id');		
            if (dataId === id) {
                return; 
            }
        } 
        
        target.innerHTML += `<button data-id="${id}" data-slug="${slug}" data-name="${name}" type="button" class="btn btn-sm btn-light sympa-pill-button mx-1"> ${name} <span class="badge bg-danger" onclick="this.parentElement.remove()">Ã—</span></button>`; 
    }

    let categoryPostData = new FormData();  
    categoryPostData.append('ids', categoryIds);

    const categoryResponse = await fetch('/category-get-by-ids', {
        method: 'POST', 
        body: categoryPostData,
    });

    const categoryJsonData = await categoryResponse.json();
    if (categoryResponse.status != 200) {		
        sympa_message("category(s) ERROR!", "warning");
    }

    categoryJsonData.categories.forEach(x => {          
        _createCategory(x.id,x.name,x.slug);
    });
}


//ARTICLE
function sympa_getArticleData()
{    
    let articleTitle = document.getElementById("sympa-article-title-input").value;
    let articleExcerpt = document.getElementById("sympa-post-excerpt-textarea").value;
    let content = trumboEditor.html();
    let active = document.getElementById("sympa-article-active").checked;

    let data = {};
    data.title = articleTitle;
	data.content = content;
	data.excerpt = articleExcerpt;
	data.active = active;
    
    return data;
}

//
async function sympa_saveCategories(articleId, categoryIds)
{	
	let postData = new FormData();  
	postData.append('article_id', articleId);
	postData.append('category_ids', categoryIds);

	const response = await fetch('/add-article-to-categories', {
		method: 'POST', 
		body: postData,
	});
	
	const jsonData = await response.json();
	
	if (jsonData.error) {
		sympa_message(jsonData.message, 'warning');
        return false;
	}
	else {
		return true;
	}    
}

async function sympa_saveTags(articleId, tagIds)
{	
	let postData = new FormData();  
	postData.append('article_id', articleId);
	postData.append('tag_ids', tagIds);

	const response = await fetch('/add-article-to-tags', {
		method: 'POST', 
		body: postData,
	});
	
	const jsonData = await response.json();
	
	if (jsonData.error) {
		sympa_message(jsonData.message, 'warning');
        return false;
	}
	else {
		return true;
	}    
}


async function sympa_save()
{
    
	let data = sympa_getArticleData();
	
	let postData = new FormData(); 
    postData.append('id', {{id|raw}}); 
	postData.append('title', data.title);
	postData.append('excerpt', data.excerpt);
	postData.append('content', data.content);
	postData.append('active', data.active);
  //  postData.append('categoryIds', sympa_getSelectedCategoryIds());
 //   postData.append('tagIds', sympa_getSelectedTagIds());

	const response = await fetch('/article-edit', {
		method: 'POST', 
		body: postData,
	});
	
	const jsonData = await response.json();
	
	if (jsonData.error) {        
		sympa_message(jsonData.message, 'warning');
	}
	else {
        let haveError = false;
        if (jsonData.data && jsonData.data.article_id){ //'data' => ['article_id' => $articleId],
            const articleId = jsonData.data.article_id;  
            const categoryIds = sympa_getSelectedCategoryIds();
            const tagIds = sympa_getSelectedTagIds();
                                    
           // if (categoryIds.length){
               haveError = await sympa_saveCategories(articleId, categoryIds); 
               if (!haveError) return;  
           // }     
            
          //  if (tagIds.length){                
               haveError = await sympa_saveTags(articleId, tagIds); 
               if (!haveError) return;  
          //  }   
              
            sympa_message('Article updated!', 'success');                       
        }
        else{
            sympa_message('Bad response: No article ID found!', 'warning');
        }
        
	}    
}


/*
async function sympa_save(){
	let data = sympa_getArticleData();
	
	let postData = new FormData();  
	postData.append('id', {{id|raw}});
	postData.append('title', data.title);
	postData.append('excerpt', data.excerpt);
	postData.append('content', data.content);
	postData.append('active', data.active);
    postData.append('categoryIds', sympa_getSelectedCategoryIds());
    postData.append('tagIds', sympa_getSelectedTagIds());

    console.log(postData);
 
	const response = await fetch('/article-edit', {
		method: 'POST', 
		body: postData,
	});
	
	const jsonData = await response.json();
	
	if (jsonData.error) {
		sympa_message(jsonData.message, 'warning');
	}
	else {
		sympa_message('Article updated!', 'success');
		setTimeout(function () {
		//	window.location.reload();
		}, 2000);
	}    
}
*/


function sympa_init(){
    trumboEditor.trumbowyg('html', '{{content|raw}}');
    document.getElementById('sympa-article-id-input').value = '{{id|raw}}';
    document.getElementById('sympa-article-title-input').value = '{{title|raw}}';
    document.getElementById('sympa-post-excerpt-textarea').value = '{{excerpt|raw}}';
    document.getElementById('sympa-article-active').checked = {{active|raw}};    
}

//MAIN
window.addEventListener('load', async function() {
    sympa_init();
    sympa_initCategoriesAndTags();
});





</script>
